import java.util.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

// Абстрактный класс "Цирк"
abstract class Circus {
    protected String title, city, period, author, genre;
    protected LocalDate premiereDate;
    protected double ticketPrice;
    protected int actorsCount;

    public Circus(String title, String city, LocalDate premiereDate, String period,
                  double ticketPrice, String author, String genre, int actorsCount) {
        this.title = title;
        this.city = city;
        this.premiereDate = premiereDate;
        this.period = period;
        this.ticketPrice = ticketPrice;
        this.author = author;
        this.genre = genre;
        this.actorsCount = actorsCount;
    }

    public String getTitle() {
        return title;
    }

    public String getCity() {
        return city;
    }

    public LocalDate getPremiereDate() {
        return premiereDate;
    }

    public double getTicketPrice() {
        return ticketPrice;
    }

    @Override
    public abstract String toString();
}

// Акробатические представления
class AcrobaticShow extends Circus {
    private String acrobatType, inventory;

    public AcrobaticShow(String title, String city, LocalDate premiereDate, String period,
                         double ticketPrice, String author, String genre, int actorsCount,
                         String acrobatType, String inventory) {
        super(title, city, premiereDate, period, ticketPrice, author, genre, actorsCount);
        this.acrobatType = acrobatType;
        this.inventory = inventory;
    }

    @Override
    public String toString() {
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        return "\n[Акробатическое представление]\n" +
               "Название: " + title + "\nГород: " + city +
               "\nДата премьеры: " + premiereDate.format(fmt) + "\nПериод: " + period +
               "\nЦена: " + ticketPrice + " руб.\nАвтор: " + author +
               "\nЖанр: " + genre + "\nАктеров: " + actorsCount +
               "\nТип акробатики: " + acrobatType + "\nИнвентарь: " + inventory + "\n";
    }
}

// Дрессировка
class AnimalTraining extends Circus {
    private String animalType;
    private int animalCount;

    public AnimalTraining(String title, String city, LocalDate premiereDate, String period,
                          double ticketPrice, String author, String genre, int actorsCount,
                          String animalType, int animalCount) {
        super(title, city, premiereDate, period, ticketPrice, author, genre, actorsCount);
        this.animalType = animalType;
        this.animalCount = animalCount;
    }

    @Override
    public String toString() {
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        return "\n[Дрессировка]\n" +
               "Название: " + title + "\nГород: " + city +
               "\nДата премьеры: " + premiereDate.format(fmt) + "\nПериод: " + period +
               "\nЦена: " + ticketPrice + " руб.\nАвтор: " + author +
               "\nЖанр: " + genre + "\nАктеров: " + actorsCount +
               "\nТип дрессировки: " + animalType + "\nЖивотных: " + animalCount + "\n";
    }
}

// Фокусы
class MagicShow extends Circus {
    private String magicType, inventory;

    public MagicShow(String title, String city, LocalDate premiereDate, String period,
                     double ticketPrice, String author, String genre, int actorsCount,
                     String magicType, String inventory) {
        super(title, city, premiereDate, period, ticketPrice, author, genre, actorsCount);
        this.magicType = magicType;
        this.inventory = inventory;
    }

    @Override
    public String toString() {
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        return "\n[Фокусы]\n" +
               "Название: " + title + "\nГород: " + city +
               "\nДата премьеры: " + premiereDate.format(fmt) + "\nПериод: " + period +
               "\nЦена: " + ticketPrice + " руб.\nАвтор: " + author +
               "\nЖанр: " + genre + "\nАктеров: " + actorsCount +
               "\nТип фокусов: " + magicType + "\nИнвентарь: " + inventory + "\n";
    }
}

// Главный класс
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Circus> shows = new ArrayList<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

        while (true) {
            System.out.println("\nМеню:");
            System.out.println("1. Добавить представление");
            System.out.println("2. Показать все представления");
            System.out.println("3. Отсортировать по названию");
            System.out.println("4. Отсортировать по цене");
            System.out.println("5. Отсортировать по городу");
            System.out.println("6. Отсортировать по дате премьеры");
            System.out.println("0. Выход");
            System.out.print("Выберите: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // очистка ввода

            switch (choice) {
                case 1:
                    System.out.println("Тип (1 - Акробатика, 2 - Дрессировка, 3 - Фокусы): ");
                    int type = scanner.nextInt(); scanner.nextLine();

                    System.out.print("Название: "); String title = scanner.nextLine();
                    System.out.print("Город: "); String city = scanner.nextLine();
                    System.out.print("Дата премьеры (дд.ММ.гггг): ");
                    String dateStr = scanner.nextLine();
                    LocalDate date = LocalDate.parse(dateStr, formatter);
                    System.out.print("Период: "); String period = scanner.nextLine();
                    System.out.print("Цена билета: "); double price = scanner.nextDouble(); scanner.nextLine();
                    System.out.print("Автор: "); String author = scanner.nextLine();
                    System.out.print("Жанр: "); String genre = scanner.nextLine();
                    System.out.print("Количество актеров: "); int actors = scanner.nextInt(); scanner.nextLine();

                    switch (type) {
                        case 1:
                            System.out.print("Тип акробатики: "); String atype = scanner.nextLine();
                            System.out.print("Инвентарь: "); String ainv = scanner.nextLine();
                            shows.add(new AcrobaticShow(title, city, date, period, price, author, genre, actors, atype, ainv));
                            break;
                        case 2:
                            System.out.print("Тип дрессировки: "); String dtype = scanner.nextLine();
                            System.out.print("Количество животных: "); int dcount = scanner.nextInt(); scanner.nextLine();
                            shows.add(new AnimalTraining(title, city, date, period, price, author, genre, actors, dtype, dcount));
                            break;
                        case 3:
                            System.out.print("Тип фокусов: "); String mtype = scanner.nextLine();
                            System.out.print("Инвентарь: "); String minv = scanner.nextLine();
                            shows.add(new MagicShow(title, city, date, period, price, author, genre, actors, mtype, minv));
                            break;
                        default:
                            System.out.println("Неверный тип!");
                    }
                    break;

                case 2:
                    if (shows.isEmpty()) {
                        System.out.println("Список пуст.");
                    } else {
                        for (Circus show : shows) {
                            System.out.println(show);
                        }
                    }
                    break;

                case 3:
                    shows.sort(Comparator.comparing(Circus::getTitle));
                    System.out.println("Отсортировано по названию!");
                    break;

                case 4:
                    shows.sort(Comparator.comparingDouble(Circus::getTicketPrice));
                    System.out.println("Отсортировано по цене!");
                    break;

                case 5:
                    shows.sort(Comparator.comparing(Circus::getCity));
                    System.out.println("Отсортировано по городу!");
                    break;

                case 6:
                    shows.sort(Comparator.comparing(Circus::getPremiereDate));
                    System.out.println("Отсортировано по дате премьеры!");
                    break;

                case 0:
                    System.out.println("Выход из программы.");
                    return;

                default:
                    System.out.println("Неверный выбор!");
            }
        }
    }
}
